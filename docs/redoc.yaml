openapi: 3.0.1
info:
  title: Bookateria API
  description: This is the initial version of Bookateria API in Golang. Documentation
    is below. Please follow like your life depends on it. Cause it might.
  termsOfService: http://bookateria.net/terms/
  contact:
    email: farinloyejonathan@gmail.com
  version: "1.0"
servers:
  - url: https://localhost:5000/v1
  - url: http://localhost:5000/v1
tags:
  - name: auth
    description: Everything about authentication
  - name: account
    description: Operations on User accounts
  - name: assignment
    description: Assignment submission portal
  - name: document
    description: Everything Documents
  - name: forum
    description: Thing you can do on Forum. Netflix and chill stuff
paths:
  # Authorization paths

  /auth/login:
    post:
      tags:
        - auth
      summary: Manage user login
      requestBody:
        description: 'User object that needs to be logged '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        200:
          description: A Token object
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Authentication Type.
                  value:
                    type: string
                    description: The token of authenticated user.
                  expiry:
                    type: string
                    description: Token expiry time
        401:
          description: Unauthorized. Wrong Details
          content: {}
      x-codegen-request-body-name: body

  /auth/logout:
    post:
      tags:
        - auth
      summary: Log user out
      description: Invalidate user token and prevent reuse of same token
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Successfully logged user out
        401:
          description: User Authentication Failure
          content: {}
      security:
        - authorization: []

  # Account paths

  /account/all:
    get:
      tags:
        - account
      summary: Gets all signed up users
      description: All users
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /account/{id}:
    get:
      tags:
        - account
      summary: Get user by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /account:
    post:
      tags:
        - account
      summary: Create a new user
      description: Submit user details for sign up
      requestBody:
        description: content for body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAccount'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        422:
          description: Unprocessable entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      x-codegen-request-body-name: body

  /account/verify-email:
    post:
      tags:
        - account
      summary: Verify email of already created account
      requestBody:
        description: Data required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /account/request-otp:
    get:
      tags:
        - account
      summary: Generates and sends new OTP for email verification
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /account/request-password-reset:
    post:
      tags:
        - account
      summary: Submit a request to reset User password
      requestBody:
        description: Information neccessary to process request
        content:
          application/jsom:
            schema:
              type: object
              properties:
                email:
                  type: string
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /account/reset-password:
    post:
      tags:
        - account
      summary: Actually reset your password.
      requestBody:
        description: JSON expected for password reset
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                otp:
                  type: string
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  #  Assignment Portal paths

  /assignment/all:
    get:
      tags:
        - assignment
      summary: Get all assignment questions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: '#/components/schemas/Problem'

  /assignment/add:
    post:
      tags:
        - assignment
      summary: Create a new assignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestProblem'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        401:
          description: Access Denied

  /assignment/{slug}:
    get:
      tags:
        - assignment
      summary: Get question with slug
      parameters:
        - name: slug
          in: path
          description: Assignment Problem Slug
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        404:
          description: Not Found
    put:
      tags:
        - assignment
      summary: Update an assignment question
      parameters:
        - name: slug
          in: path
          description: Slug of question
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestProblem'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        401:
          description: Access Denied

  /application/{slug}/delete:
    delete:
      tags:
        - assignment
      summary: Delete an assignment question
      parameters:
        - name: slug
          in: path
          description: Slug of question
          schema:
            type: string
      responses:
        204:
          description: Deleted Successfully
        401:
          description: Access Denied

  /application/{qSlug}/submit:
    post:
      tags:
        - assignment
      summary: Submit assignment solution
      parameters:
        - name: qSlug
          in: path
          description: Slug of assignment in question
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        400:
          description: File not found
        401:
          description: Access Denied
        404:
          description: Resource not found
        500:
          description: Server error

  /assignment/{qSlug}/submissions:
    get:
      tags:
        - assignment
      summary: Get all submissions for assignment
      parameters:
        - name: qSlug
          in: path
          description: Slug of question
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        401:
          description: Access Denied
        404:
          description: Resource not found

  /assignment/{qSlug}/submission/{aSlug}:
    get:
      tags:
        - assignment
      parameters:
        - name: qSlug
          in: path
          description: Question slug
          schema:
            type: string
        - name: aSlug
          in: path
          description: Answer Slug
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        401:
          description: Access Denied

  # Document paths

  /document:
    get:
      tags:
        - document
      summary: Get all Documents
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: '#/components/schemas/Document'
    post:
      tags:
        - document
      summary: Add a document
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDocument'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        409:
          description: Duplicate document

  /document/{id}:
    get:
      tags:
        - document
      summary: Get document by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        404:
          description: Document doesn't exist

    put:
      tags:
        - document
      summary: Update a document
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDocument'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    delete:
      tags:
        - document
      summary: Delete a document
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        404:
          description: Document not found
        204:
          description: Document deleted


        # Models

  # Forum paths

  /forum/question/all:
    get:
      tags:
        - forum
      summary: Get all Questions
      description: Get an array of all created questions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'

  /forum/question/{slug}:
    get:
      tags:
        - forum
      summary: Get a specific question by ID
      description: Get a question by it's ID
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
    put: # TODO change updates tp put request
      tags:
        - forum
      summary: Edit an already created question
      requestBody:
        description: completely or partially adjusted data. Send the whole object nonetheless
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostQuestion'
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
      security:
        - authorization: []
    delete:
      tags:
        - forum
      summary: Delete created question
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted
      security:
        - authorization: []

  /forum/question:
    post:
      tags:
        - forum
      summary: Create a new question
      description: I think you get the gist
      requestBody:
        description: Send the body, what else did you expect?
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostQuestion'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
      security:
        - authorization: []

  /forum/question/{slug}/up-votes:
    get:
      tags:
        - forum
      summary: Get all upvotes on a question, specified by id
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionUpvote'
    post:
      tags:
        - forum
      summary: Upvote a question
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Click the upvote botton, send the request here
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionUpvote'
      security:
        - authorization: [ ]

  /forum/question/{slug}/up-votes/{id}:
    delete:
      tags:
        - forum
      summary: Cancel upvote on a question
      parameters:
        - name: id
          description: up-vote ID
          in: path
          required: true
          schema:
            type: integer
        - name: slug
          description: Question slug
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Cancelled up vote successfully.
      security:
        - authorization: [ ]

  /forum/answer/all:
    get:
      tags:
        - forum
      summary: Get all Answers
      description: Get an array of all created Answers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: '#/components/schemas/Answer'

  /forum/answer/{slug}:
    get:
      tags:
        - forum
      summary: Get a specific answer by ID
      description: Get a answer by it's ID
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
    put:  # TODO change updates tp put request
      tags:
        - forum
      summary: Edit an already created answer
      requestBody:
        description: completely or partially adjusted data. Send the whole object nonetheless
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAnswer'
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
      security:
        - authorization: [ ]
    delete:
      tags:
        - forum
      summary: Delete answer
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted
      security:
        - authorization: [ ]

  /forum/answer:
    post:
      tags:
        - forum
      summary: Create a new answer
      description: I think you get the gist
      requestBody:
        description: Send the body, what else did you expect?
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAnswer'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
      security:
        - authorization: [ ]

  /forum/answer/{slug}/up-votes:
    get:
      tags:
        - forum
      summary: Get all upvotes on a answer, specified by id
      parameters:
        - name: slug
          description: Answer slug
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerUpvote'
    post:
      tags:
        - forum
      summary: Upvote a answer
      parameters:
        - name: slug
          description: Answer slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Click the upvote botton, send the request here
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerUpvote'
      security:
        - authorization: [ ]

  /forum/answer/{slug}/up-votes/{id}:
    delete:
      tags:
        - forum
      summary: Cancel upvote on a answer
      parameters:
        - name: slug
          description: Answer slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          description: Up vote ID
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Cancelled up vote successfully.
      security:
        - authorization: [ ]

# Models
components:
  schemas:
    Auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        stay_in:
          type: bool

    User:
      type: object
      properties:
        id:
          type: integer
        user_name:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        is_admin:
          type: boolean
        password:
          type: string
        last_login:
          type: string
        is_active:
          type: boolean

    PostAccount:
      type: object
      properties:
        user_name:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string

    VerifyEmail:
      type: object
      properties:
        email:
          type: string
        pin:
          type: string

    Profile:
      type: object
      properties:
        id:
          type: integer
        points:
          type: integer
        user_id:
          type: integer
        user:
          type: integer

    Question:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        user_id:
          type: integer
        up_votes:
          type: integer

    PostQuestion:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        user_id:
          type: integer

    QuestionTag:
      type: object
      properties:
        question_id:
          type: integer
        name:
          type: string

    QuestionUpvote:
      type: object
      properties:
        id:
          type: integer
        question_id:
          type: integer
        user_id:
          type: integer

    Answer:
      type: object
      properties:
        id:
          type: integer
        question_id:
          type: integer
        response:
          type: string
        up_votes:
          type: integer
        user_id:
          type: integer

    PostAnswer:
      type: object
      properties:
        question_id:
          type: integer
        response:
          type: string

    AnswerUpvote:
      type: object
      properties:
        id:
          type: integer
        question_id:
          type: integer
        question:
          type: integer
        user_id:
          type: integer

    Document:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        edition:
          type: integer
        author:
          type: string
        summary:
          type: string

    PostDocument:
      type: object
      properties:
        title:
          type: string
        edition:
            type: integer
        author:
            type: string
        summary:
            type: string

    Problem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        deadline:
          type: string
        user:
          $ref: '#/components/schemas/User'
        user_id:
          type: integer
        slug:
          type: string
        submission_count:
          type: integer

    RequestProblem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        deadline:
          type: string
        submission_count:
          type: integer

    Submission:
      type: object
      properties:
        problem:
          $ref: '#/components/schemas/Problem'
        problem_id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        user_id:
          type: integer
        file_slug:
          type: string
        slug:
          type: string
        submissions:
          type: int

    Response:
      type: object
      properties:
        message:
          type: string

  securitySchemes:
    authorization:
      type: apiKey
      name: authorization
      in: header
